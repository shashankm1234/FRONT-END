-> Breakpoints are customizable widths that determine how your responsive layout behaves across device or viewport sizes in Bootstrap.
Breakpoints are the building blocks of responsive design. Use them to control when your layout can be adapted at a particular viewport or device size.
* Media queries 
Since Bootstrap is developed to be mobile first, we use a handful of media queries to create sensible breakpoints for our layouts and interfaces. 
These breakpoints are mostly based on minimum viewport widths and allow us to scale up elements as the viewport changes.


-> Containers are a fundamental building block of Bootstrap that contain, pad, and align your content within a given device or viewport.
Containers are the most basic layout element in Bootstrap and are required when using our default grid system. Containers are used to contain, pad, 
and (sometimes) center the content within them. While containers can be nested, most layouts do not require a nested container.

Bootstrap comes with three different containers:
.container -> which sets a max-width at each responsive breakpoint
.container-{breakpoint} -> which is width: 100% until the specified breakpoint
.container-fluid -> which is width: 100% at all breakpoints

Default container 
Our default .container class is a responsive, fixed-width container, meaning its max-width changes at each breakpoint.
Responsive containers 
Responsive containers allow you to specify a class that is 100% wide until the specified breakpoint is reached, after which we apply max-widths 
for each of the higher breakpoints. For example, .container-sm is 100% wide to start until the sm breakpoint is reached, 
where it will scale up with md, lg, xl, and xxl.

Fluid containers 
Use .container-fluid for a full width container, spanning the entire width of the viewport.


-> GRIDS
Bootstrap’s grid system uses a series of containers, rows, and columns to layout and align content. It’s built with flexbox and is fully responsive. 
<div class="container text-center">
  <div class="row">
    <div class="col">
      Column
    </div>
    <div class="col">
      Column
    </div>
    <div class="col">
      Column
    </div>
  </div>
</div>
The above example creates three equal-width columns across all devices and viewports using our predefined grid classes. 
Those columns are centered in the page with the parent .container.


























